package com.bom.tno.smartcore;

/* 
 * 
 * Copyright 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 * SPDX-License-Identifier: MIT-0
 * 
 */

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Date;
import java.util.Properties;
import java.util.concurrent.ExecutionException;

import redis.clients.jedis.DefaultJedisClientConfig;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.params.SetParams;

/**
 * This class demonstrates how to use Amazon ElastiCache for Redis using the
 * Jedis client.
 */
public class RedisCacheUtil {
	
	/** The properties object to hold the config. */
	private Properties properties = null;
	
	/** The Redis cluster host name. */
	private String redisHost = null;
	
	/** The Redis cluster port. */
	private int redisPort = 0;
	
	/** The cache-expiry value (in seconds). */
	private int cacheExpiryInSecs = 30;
	
	private String user="";
	private String password="";
	
	/**
	 * The flag that denotes whether cache needs to be flushed or not on shutdown.
	 */
	private boolean cacheFlushOnShutdown = false;
	
	/** The client shutdown timeout value (in seconds). */
	private int clientTimeoutInSecs = 30;
	
	/** The Jedis object. */
	private Jedis jedis = null;

	/**
	 * Constructor performing initialization.
	 *
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	public RedisCacheUtil() throws IOException {
		initialize();
	}

	/**
	 * Loads the properties from the config file and starts the Jedis client.
	 *
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	private void initialize() throws IOException {
		startClient();
	}

	public RedisCacheUtil(String redisHost, int redisPort, String user, String password) {
		super();
		this.redisHost = redisHost;
		this.redisPort = redisPort;
		this.user = user;
		this.password = password;
	}

	public RedisCacheUtil(String redisHost, int redisPort, int cacheExpiryInSecs, String user, String password,
			boolean cacheFlushOnShutdown, int clientTimeoutInSecs) {
		super();
		this.redisHost = redisHost;
		this.redisPort = redisPort;
		this.cacheExpiryInSecs = cacheExpiryInSecs;
		this.user = user;
		this.password = password;
		this.cacheFlushOnShutdown = cacheFlushOnShutdown;
		this.clientTimeoutInSecs = clientTimeoutInSecs;
	}


	/**
	 * Starts the Jedis client.
	 *
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	private void startClient() throws IOException {
		System.out.println("Initializing Redis client...");
		DefaultJedisClientConfig defaultJedisClientConfig = DefaultJedisClientConfig.builder()
				.user(this.user)
				.password(this.password)
				.connectionTimeoutMillis(clientTimeoutInSecs*1000)
				.build();
		jedis = new Jedis(redisHost, redisPort, defaultJedisClientConfig);
		System.out.println("Completed initializing Redis client.");
	}

	/**
	 * Stops the Jedis client.
	 */
	private void stopClient() {
		System.out.println("Shutting down Redis client...");
		jedis.close();
		boolean result = jedis.isConnected();
		if (!result) {
			System.out.println("Completed shutting down Redis client.");
		} else {
			System.out.println("Shutdown did not complete before timeout.");
		}
	}


	/**
	 * Upsert cache entry - adds if not present; else updates based on the key.
	 *
	 * @param key the key
	 * @param value the value
	 * @param checkExists the check exists
	 * @throws InterruptedException the interrupted exception
	 * @throws ExecutionException the execution exception
	 */
	public void upsertCacheEntry(String key, String value, boolean checkExists)
			throws InterruptedException, ExecutionException {
		boolean valueExists = false;
		if (checkExists && (getCacheValue(key) != null)) {
			valueExists = true;
		}
		String result = jedis.set(key, value, (new SetParams()).ex(cacheExpiryInSecs));
		if (result.equalsIgnoreCase("OK")) {
			if (checkExists) {
				if (valueExists) {
					System.out.println("Updated = {key=" + key + ", value=" + value + "}");
				} else {
					System.out.println("Inserted = {key=" + key + ", value=" + value + "}");
				}
			} else {
				System.out.println("Upserted = {key=" + key + ", value=" + value + "}");
			}
		} else {
			System.out.println("Could not upsert key '" + key + "'");
		}
	}

	/**
	 * Deletes the cache entry for the specified key.
	 *
	 * @param key the key
	 * @throws InterruptedException the interrupted exception
	 * @throws ExecutionException the execution exception
	 */
	public void deleteCacheEntry(String key) throws InterruptedException, ExecutionException {
		Long result = jedis.del(key);
		if (result.longValue() == 1L) {
			System.out.println("Deleted key '" + key + "'");
			System.out.println("Testing delete...");
			getCacheValue(key);
			System.out.println("Completed testing delete.");
		} else {
			System.out.println("Could not delete key '" + key + "'");
		}
	}

	/**
	 * Flushes the cache.
	 *
	 * @throws InterruptedException the interrupted exception
	 * @throws ExecutionException the execution exception
	 */
	private void flushCache() throws InterruptedException, ExecutionException {
		long startTime = (new Date()).getTime();
		String result = jedis.flushAll();
		long endTime = (new Date()).getTime();
		if (result.equalsIgnoreCase("OK")) {
			System.out.println("Flushed cache in " + (endTime - startTime) + " millisecond(s).");
		} else {
			System.out.println("Could not flush cache.");
		}
	}


	/**
	 * Gets the specified cache value.
	 *
	 * @param key the key
	 * @return the cache value
	 */
	public String getCacheValue(String key) {
		long startTime = (new Date()).getTime();
		String value = jedis.get(key);
		long endTime = (new Date()).getTime();
		if (value != null) {
			System.out.println("Retrieved value='" + value + "' for key= '" + key + "' in " + (endTime - startTime)
					+ " millisecond(s).");
		} else {
			System.out.println("Key '" + key + "' not found.");
		}
		return value;
	}

	/**
	 * Perform shutdown - flush the cache and stop the Jedis client.
	 *
	 * @throws InterruptedException the interrupted exception
	 * @throws ExecutionException the execution exception
	 */
	public void shutdown() throws InterruptedException, ExecutionException {
		if (cacheFlushOnShutdown) {
			flushCache();
		}
		stopClient();
	}

}
